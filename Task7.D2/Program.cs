/*Миша и негатив

    Миша уже научился хорошо фотографировать и недавно увлекся программированием.
    Первая программа, которую он написал, позволяет формировать негатив бинарного черно-белого изображения.

    Бинарное черно-белое изображение – это прямоугольник, состоящий из пикселей,
    каждый из которых может быть либо черным, либо белым. Негатив такого изображения
    получается путем замены каждого черного пикселя на белый, а каждого белого пикселя – на черный.

    Миша, как начинающий программист, написал свою программу с ошибкой, поэтому
    в результате ее исполнения мог получаться некорректный негатив. Для того 
    чтобы оценить уровень несоответствия получаемого негатива исходному изображению, 
    Миша начал тестировать свою программу.

    В качестве входных данных он использовал исходные изображения. Сформированные программой 
    негативы он начал тщательно анализировать, каждый раз 
    определяя число пикселей негатива, которые получены с ошибкой.

    Требуется написать программу, которая в качестве входных данных 
    использует исходное бинарное черно-белое изображение и 
    полученный Мишиной программой негатив, и на основе этого определяет количество пикселей, в которых допущена ошибка.

Входные данные
    целые числа n и m (1 ≤ n, m ≤ 100) – высоту и ширину исходного изображения (в пикселях).
    Последующие n строк содержат описание исходного изображения.
    Каждая строка состоит из m символов «B» и «W».
    Символ «B» соответствует черному пикселю, а 
    символ «W» – белому. 
    Далее следует пустая строка, а 
    после нее – описание выведенного Мишиной программой изображения в том же формате, что и исходное изображение.

Выходные данные

    вывести число пикселей негатива, которые неправильно сформированы Мишиной программой.


3 4
WBBW
BBBB
WBBW

BWWW
WWWB
BWWB => 2

2 2
BW
BB

WW
BW => 2

*/

char[,] CreateMatrix() // Создаем двумерный массив (Пользователь вводит размер)
{
    Console.Write("Введите размер матрицы (два числа через пробел): ");
    int[] arrayVolume = Console.ReadLine()
                        .Split(" ")
                        .Select(s => int.Parse(s))
                        .ToArray();  // Исключили добавление переменных
    char[,] matrix = new char[arrayVolume[0],arrayVolume[1]];
    
    return matrix;
}

void InputMatrix(char[,] matrix)         // Заполняем матрицу
{
    Console.WriteLine();

    for (int i = 0; i < matrix.GetLength(0); i++)
    {   
        for (int j = 0; j < matrix.GetLength(1); j++)
        {
            if(new Random().Next(0, 2) == 0)             
                matrix[i,j] = 'W';
            else matrix[i,j] = 'B';
        Console.Write($"{matrix[i,j]}\t");
        }        
    Console.WriteLine();
    }
}


int compareMatrix(char[,] negative, char[,] positive)                                    // Отдает массив с Транспонирование по горизонтали
{
    int result = 0;              
    
    for (int i = 0; i < negative.GetLength(0); i++)
    {   
        for (int j = 0; j < negative.GetLength(1); j++)
        {
            if (negative[i,j] == positive[i,j])
                result++;
        }
    }
    return result;                                                  // вернём массив с ответами
}

Console.Clear();

char [,] matrixNegative = CreateMatrix();

Console.WriteLine("\nНегатив:");
InputMatrix(matrixNegative);

char [,] matrixPositive = new char[matrixNegative.GetLength(0),matrixNegative.GetLength(1)];;

Console.WriteLine($"\nПозитив:");
InputMatrix(matrixPositive);

Console.WriteLine($"\nОшибок: {compareMatrix(matrixNegative, matrixPositive)}");
